


---------------------TP3 : les listes, les fichiers et les opérateurs----------




intro:
class Point {
    double x;
    double y;
        
public:

    Point(double x=0, double y=0);
    // ...
};

class Maillon {
   friend class Liste;
   Point info;
   Maillon *suivant;
public:
    Maillon(Point &P);
    // ...
};

class Liste {   
    Maillon *tete;
    Maillon *queue;
public:
    Liste();
    ~Liste();            
};




//Exercice 1: Écrire les constructeurs et les destructeurs des classes Liste, Maillon et Point.

Point::Point(double x, double y) {
    this->x = x;
    this->y = y;
}

Maillon::Maillon(Point &P) {
    info = P;
    suivant = nullptr;
}

Liste::Liste() {
    tete = nullptr;
    queue = nullptr;
}

Liste::~Liste() {
    while (tete) {
        Maillon *temp = tete;
        tete = tete->suivant;
        delete temp;
    }
}


//Exercice 2:  Écrire la fonction inserer_tete et inserer_queue qui insèrent un point en tête et en queue respectivement.

void Liste::inserer_tete(Point P) {
    Maillon *nouveau = new Maillon(P);
    if (!tete) {
        tete = queue = nouveau;
    } else {
        nouveau->suivant = tete;
        tete = nouveau;
    }
}

void Liste::inserer_queue(Point P) {
    Maillon *nouveau = new Maillon(P);
    if (!tete) {
        tete = queue = nouveau;
    } else {
        queue->suivant = nouveau;
        queue = nouveau;
    }
}


//Exercice 3:   Écrire une fonction d’affichage d’un point puis une fonction d’affichage d’une liste.


void Point::afficher() {
    cout << "(" << x << ", " << y << ")" << endl;
}

void Liste::afficher() {
    Maillon *temp = tete;
    while (temp) {
        temp->info.afficher();
        temp = temp->suivant;
    }
}





// Exercice 4:   Écrire l’opérateur << qui affiche un point:  cout << P; // affiche un point

ostream& operator<<(ostream& os, const Point& P) {
    os << "Point(" << P.x << ", " << P.y << ")";
    return os;
}


//Exercice 5:  Écrire l’opérateur << qui affiche une liste.

ostream& operator<<(ostream& os, const Liste& L) {
    Maillon *temp = L.tete;
    os << "[";
    while (temp) {
        os << temp->getInfo();
        if (temp->getSuivant()) os << ", ";
        temp = temp->getSuivant();
    }
    os << "]";
    return os;
}




//Exercice 6: Écrire une fonction qui écrit une liste dans un fichier:   Écrire d’abord le nombre de maillons, ensuite les points contenus dans les maillons.
bool Liste::ecrire(char *nom_fichier, char mode) {
    ofstream fichier;
    if (mode == 't') {
        fichier = ofstream(nom_fichier, ios::out);
    } else {
        fichier = ofstream(nom_fichier, ios::binary);
    }

    if (!fichier) return false;

    int nombreMaillons = 0;
    Maillon *temp = tete;
    while (temp) {
        nombreMaillons++;
        temp = temp->suivant;
    }

    // Nombre de maillons
    if (mode == 't') fichier << nombreMaillons << endl;
    else fichier.write(reinterpret_cast<char*>(&nombreMaillons), sizeof(nombreMaillons));

    temp = tete;
    while (temp) {
        // Coordonnées
        if (mode == 't') fichier << temp->info.x << " " << temp->info.y << endl;
        else fichier.write(reinterpret_cast<char*>(&temp->info), sizeof(Point));
        temp = temp->suivant;
    }

    fichier.close();
    return true;
}


//Exercice 7:  Écrire un constructeur de la classe Liste prenant en argument un fichier et un argument appelé mode indiquant si la lecture doit se faire en texte ou en binaire.

Liste::Liste(char *nom_fichier, char mode) {
    tete = queue = NULL;
    
    ifstream fichier;
    if (mode == 't') fichier = ifstream(nom_fichier, ios::in);
    else fichier = ifstream(nom_fichier, ios::binary);

    if (!fichier) return;

    int nombreMaillons = 0;
    if (mode == 't') fichier >> nombreMaillons;
    else fichier.read(reinterpret_cast<char*>(&nombreMaillons), sizeof(nombreMaillons));

    for (int i = 0; i < nombreMaillons; ++i) {
        double x, y;
        Point P;

        if (mode == 't') {
            fichier >> x >> y;
            P = Point(x, y);
        }
        else fichier.read(reinterpret_cast<char*>(&P), sizeof(Point));

        inserer_queue(P);
    }
    fichier.close();
}


//Exercice 8:Écrire le constructeur par recopie.

Liste::Liste(const Liste& autre) {
    tete = queue = NULL;
    Maillon *temp = autre.tete;
    while (temp) {
        inserer_queue(temp->info);
        temp = temp->suivant;
    }
}



//Exercice 9

Soient les instructions:

Liste L1, L2;
// ...
// ... 
L1 = L2


//Pourquoi l’instruction d’affectation n’est pas valable ?

//Redéfinir l’opérateur = : L1 doit être identique à L2, mais sans partager aucun espace mémoire.



Liste& Liste::operator=(const Liste& autre) {
    if (this == &autre) return *this;
    
    while (tete) {
        Maillon *temp = tete;
        tete = tete->suivant;
        delete temp;
    }
    
    Maillon *temp = autre.tete;
    while (temp) {
        inserer_queue(temp->info);
        temp = temp->suivant;
    }
    return *this;
}


//Exercice 10:Écrire une fonction distance dans la classe Point.

double Point::distance(const Point& autre) {
    return sqrt((x - autre.x) * (x - autre.x) + (y - autre.y) * (y - autre.y));
}


//Exercice 11:Dans la classe Liste écrire une fonction qui prend en argument un point P et réel seuil. La fonction renvoie un pointeur sur une liste contenant tous les points dont les distances à P sont inférieures à seuil.


Liste* Liste::points_proches(const Point& P, double seuil) {
    Liste *resultat = new Liste();
    Maillon *temp = tete;
    while (temp) {
        if (temp->info.distance(P) < seuil)
            resultat->inserer_queue(temp->info);
        temp = temp->suivant;
    }
    return resultat;
}



//Exercice 12:Écrire l’opérateur == qui compare deux listes. Il renvoie vrai si les deux listes sont strictement identiques.En déduire l’opérateur !=.



bool Liste::operator==(const Liste& autre) {
    Maillon *temp1 = tete;
    Maillon *temp2 = autre.tete;
    while (temp1 && temp2) {
        if (temp1->info.getX() != temp2->info.getX() || temp1->info.getY() != temp2->info.getY())
            return false;
        temp1 = temp1->suivant;
        temp2 = temp2->suivant;
    }
    return temp1 == nullptr && temp2 == nullptr;
}

bool Liste::operator!=(const Liste& autre) {
    return !(*this == autre);
}

//Exercice 13:  Écrire l’opérateur [] qui prend en argument un indice i et qui renvoie le point qui se trouve dans le Ie maillon s’il existe. Sinon la fonction provoque l’affichage d’un message d’erreur et l’arrêt du programme.

Point& Liste::operator[](int i) {
    Maillon *temp = tete;
    int count = 0;
    
    while (temp != nullptr) {
        if (count == i) {
            return temp->info;
        }
        temp = temp->suivant;
        count++;
    }
    
    cerr << "Indice hors de portée." << endl;
    exit(EXIT_FAILURE);
}




